package com.example.hm_project.view.activity;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;

import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;

import com.example.hm_project.Command.PopupListener;
import com.example.hm_project.Command.EditTextInput;
import com.example.hm_project.Command.JsonMaker;
import com.example.hm_project.R;
import com.example.hm_project.Command.InterfaceManager;
import com.example.hm_project.data.LoginJsonData;
import com.example.hm_project.data.PreferenceManager;
import com.example.hm_project.databinding.ActivityLoginBinding;

import com.example.hm_project.Command.SessionCallback;
import com.example.hm_project.util.CodeManager;
import com.example.hm_project.util.Crypto;
import com.example.hm_project.util.HM_Singleton;
import com.example.hm_project.util.JsonParser;
import com.example.hm_project.util.NetworkManager;
import com.google.firebase.crashlytics.FirebaseCrashlytics;
import com.kakao.auth.AuthType;
import com.kakao.auth.Session;

import java.net.URL;

/***
 *  로그인
 *  1- 로그인버튼 클릭시 이벤트
 *  2- 이메일 찾기 버튼 클릭시 이벤트
 *  3- 비밀번호 찾기 버튼 클릭시 이벤트
 *  4- 회원가입 버튼 클릭시 이벤트
 *  5- 카카오로그인 버튼 클릭시 이벤트
 *  6- 임시비밀번호 자동입력하는 기능
 *  7- 자동 로그인 기능
 *  8- 로그인 성공, 자동 로그인 성공시 이벤트
 *  9- 엑티비티 종료
 *  10- 서버 체크
 */

public class LoginActivity extends AppCompatActivity {

    @SuppressLint("StaticFieldLeak")
    public static Context mContext;
    // 서버데이터(Json 형식)을 파싱하기 위한 클래스
    private JsonParser jsonParser = HM_Singleton.getInstance(new JsonParser());
    // 버튼 클릭시 해당 화면으로 이동시켜주는 클래스
    private PopupListener popupListener = new PopupListener();
    private SessionCallback sessionCallback = new SessionCallback(LoginActivity.this); //세션 받아옴
    private ActivityLoginBinding binding;

    private String serverData;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_login);
        binding.setActivity(this);

        // 네트워크 연결 여부 체크
        if (NetworkManager.networkCheck(getApplicationContext())) {
            serverCheck(); // 서버가 닫혀있는지 체크
            if ("Yes".equals(serverData)) {

                Session.getCurrentSession().addCallback(sessionCallback);
                Session.getCurrentSession().checkAndImplicitOpen(); // 카카오 자동로그인

                autoLogin();  // 자동 로그인

            } else {
                popupListener.popupEvent(LoginActivity.this, "서버 연결 오류", "로그인 실패");
            }
        } else {
            popupListener.viewPopup(this, CodeManager.NewtWork_Error);
        }
        set_FindPassword(); // 패스워드 찾기 했을 때 임시비밀번호 셋팅
    }

    // 1 - 로그인 버튼 클릭시 이벤트
    @RequiresApi(api = Build.VERSION_CODES.O)
    public void onLoginClick(View view) {
        if (EditTextInput.checkNPE(binding.TextInputEditTextEmail.getText().toString()) || EditTextInput.checkNPE(binding.TextInputEditTextPassword.getText().toString())) {
            if (EditTextInput.checkNPE(binding.TextInputEditTextEmail.getText().toString()))
                binding.loginErrorEmail.setText("아이디를 입력해주세요.");
            else
                binding.loginErrorEmail.setText("");
            if (EditTextInput.checkNPE(binding.TextInputEditTextPassword.getText().toString()))
                binding.loginErrorPassword.setText("비밀번호를 입력해주세요.");
            else
                binding.loginErrorPassword.setText("");
        } else {
            // 네트워크 연결이 되었는지 확인
            if (NetworkManager.networkCheck(getApplicationContext())) {
                serverCheck(); // 서버가 열렸는지 확인
                if ("Yes".equals(serverData)) { // 서버가 열렸다면 실행
                    try {
                        URL url = new URL("http://218.234.77.97:8080/HairManager/login/Login.jsp");
                        // 암호화 키 생성
                        Crypto.aesKeyGen();
                        // 서버통신
                        InterfaceManager task = new InterfaceManager(url);
                        String json = JsonMaker.jsonObjectMaker(binding.TextInputEditTextEmail.getText().toString(),
                                Crypto.encryptAES256(binding.TextInputEditTextPassword.getText().toString()), "", "", "", "", Crypto.secretKEY, "", "");
                        String returns = task.execute(json).get(); // 9

                        // 데이터 파싱
                        LoginJsonData loginJsonData = jsonParser.jsonParsingLogin(returns);

                        String code = loginJsonData.getCode();
                        String userNO = loginJsonData.getData1();
                        String db_password = loginJsonData.getData2();

                        // 일반 패스워드 로그인 실패
                        if ("LO_0001".equals(code)) {
                            popupListener.popupEvent(LoginActivity.this, "로그인 실패", "아이디와 비밀번호를 확인하세요.");
                            // 임시패스워드 로그인 성공
                        } else if ("LO_2000".equals(code)) {
                            //자동로그인을 위해 쉐어드프리퍼런스에 이메일이랑 암호화된 패스워드 저장
                            PreferenceManager.setString(mContext, "email", binding.TextInputEditTextEmail.getText().toString());
                            PreferenceManager.setString(mContext, "password", db_password);
                            PreferenceManager.setString(mContext, "userNO", userNO);
                            popupListener.popupEventReturn(LoginActivity.this, "로그인 성공", "임시 비밀번호로 로그인 했습니다.\n 비밀번호를 변경해주세요.");

                            // 임시 패스워드 로그인 실패
                        } else if ("LO_0007".equals(code)) {
                            popupListener.popupEvent(LoginActivity.this, "로그인 실패", "아이디와 비밀번호를 확인하세요.");

                            // 임시 패스워드 유효기간 만료 실패
                        } else if ("LO_0006".equals(code)) {
                            popupListener.popupEvent(LoginActivity.this, "로그인 실패", "임시 비밀번호 유효기한이 \n만료되었습니다. 다시 발급받으세요.");

                            // 로그인 성공
                        } else if ("SY_2000".equals(code)) {
                            // 자동로그인을 위해 쉐어드프리퍼런스에 이메일이랑 암호화된 패스워드 저장
                            PreferenceManager.setString(mContext, "email", binding.TextInputEditTextEmail.getText().toString());
                            PreferenceManager.setString(mContext, "password", db_password);
                            PreferenceManager.setString(mContext, "userNO", userNO);



                            Intent intent = new Intent(LoginActivity.this, MainActivity.class);
                            startActivity(intent);
                            LoginActivity.this.finish();
                        } else {
                            popupListener.popupEvent(LoginActivity.this, "로그인 실패", "알 수 없는 오류입니다");
                        }
                    } catch (Exception e) {
                        FirebaseCrashlytics.getInstance().recordException(e);
                    }
                } else {
                    popupListener.popupEvent(LoginActivity.this, "서버 연결 오류", "로그인 실패");
                }
            } else {
                popupListener.viewPopup(this, CodeManager.NewtWork_Error); // 네트워크 연결이 안되었다는 알림 팝업 띄움
            }
        }
    }

    // 2 - 이메일 찾기 버튼 클릭시 이벤트
    public void onFindEmailClick(View view) {
        popupListener.moveActivity(LoginActivity.this, FindEmailActivity.class);
    }

    // 3 - 비밀번호 찾기 버튼 클릭시 이벤트
    public void onFindPasswordClick(View view) {
        popupListener.moveActivity(LoginActivity.this, FindPasswordActivity.class);
    }

    // 4 - 회원가입 버튼 클릭시 이벤트
    public void onSignUPClick(View view) {
        popupListener.moveActivity(LoginActivity.this, SignUpActivity.class);
    }

    // 5 - 카카오로그인 버튼 클릭시 이벤트
    public void onKakaoLoginClick(View view) {
        if (NetworkManager.networkCheck(getApplicationContext())) {
            serverCheck(); //  서버가 닫혔다면 카카오 로그인 막는다.
            if ("Yes".equals(serverData)) {
                Session.getCurrentSession().addCallback(sessionCallback);
                Session.getCurrentSession().open(AuthType.KAKAO_TALK_ONLY, LoginActivity.this);
            } else {
                popupListener.popupEvent(LoginActivity.this, "서버 연결 오류", "로그인 실패");
            }
        } else {
            popupListener.viewPopup(this, CodeManager.NewtWork_Error);
        }
    }

    // 6 - 임시비밀번호 자동입력하는 기능 ( 사용자가 비밀번호 찾기를 성공했을 때 임시 비밀번호를 비밀번호 칸에 세팅해준다. )
    private void set_FindPassword() {
        mContext = this;
        String findPassword = PreferenceManager.getString(mContext, "findPassword");
        if (!findPassword.equals("")) {
            binding.TextInputEditTextPassword.setText(findPassword);
            // 한번 임시 로그인 한 후에 임시비밀번호 지우기
            PreferenceManager.setString(mContext, "findPassword", "");
        }
    }

    // 7 - 자동 로그인 기능
    public void autoLogin() {
        mContext = this;
        String autoEmail = PreferenceManager.getString(mContext, "email");
        String autoPassword = PreferenceManager.getString(mContext, "password");

        if (!EditTextInput.checkNPE(autoEmail) && !EditTextInput.checkNPE(autoPassword)) {
            try {
                URL url = new URL("http://218.234.77.97:8080/HairManager/login/AutoLogin.jsp");

                InterfaceManager task = new InterfaceManager(url);
                String json = JsonMaker.jsonObjectMaker(autoEmail, autoPassword, "", "", "", "", "", "", "");
                String returns = task.execute(json).get(); // 9

                //JsonParserLogin Class를 이용하여 데이터를 파싱후 가져온다.
                LoginJsonData loginJsonData = jsonParser.jsonParsingAutoLogin(returns);

                String code = loginJsonData.getCode();
                String userNO = loginJsonData.getData1();

                if ("LO_0001".equals(code)) {
                    popupListener.popupEvent(LoginActivity.this, "자동로그인 실패", "아이디와 비밀번호를 확인하세요.");
                    Log.i("일반 패스워드 로그인 실패", code);
                } else if ("LO_2000".equals(code)) {
                    Toast.makeText(LoginActivity.this, "임시 비밀번호로 로그인 했습니다.\n 비밀번호를 변경해주세요.", Toast.LENGTH_LONG).show();
                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);
                    startActivity(intent);
                    finish();
                    Log.i("임시 패스워드 로그인 성공", code);
                } else if ("LO_0007".equals(code)) {
                    popupListener.popupEvent(LoginActivity.this, "자동로그인 실패", "아이디와 비밀번호를 확인하세요.");
                    Log.i("임시 패스워드 로그인 실패", code);
                } else if ("LO_0006".equals(code)) {
                    // 임시비밀번호가 만료되었을 경우 쉐어드프리퍼런스에 저장되어 있는 이메일과 패스워드를 지운다.
                    PreferenceManager.setString(mContext, "email", "");
                    PreferenceManager.setString(mContext, "password", "");
                    popupListener.popupEvent(LoginActivity.this, "자동로그인 실패", "임시 비밀번호 유효기한이 \n만료되었습니다. 다시 발급받으세요.");
                    Log.i("임시 패스워드 유효기간 만료 실패", code);
                } else if ("SY_2000".equals(code)) {
                    Intent intent = new Intent(LoginActivity.this, MainActivity.class);
                    startActivity(intent);
                    finish();
                } // 서버가 닫혀 있거나 알 수 없는 오류가 발생했을 경우
                else {
                    popupListener.popupEvent(LoginActivity.this, "자동로그인 실패", "알 수 없는 오류가 발생했습니다.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    // 8 - 로그인 성공, 자동 로그인 성공시 이벤트
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (Session.getCurrentSession().handleActivityResult(requestCode, resultCode, data)) {
            super.onActivityResult(requestCode, resultCode, data);
            return;
        }
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == 1) {
            if (resultCode == RESULT_OK) {
                //데이터 받기
                Intent intent2 = new Intent(LoginActivity.this, MainActivity.class);
                startActivity(intent2);
                LoginActivity.this.finish();
            }
        }
    }

    // 9 - 엑티비티 종료
    @Override
    protected void onDestroy() {
        super.onDestroy();
        Session.getCurrentSession().removeCallback(sessionCallback);
    }

    // 10 - 서버 체크
    private void serverCheck() {
        try {
            URL url = new URL("http://218.234.77.97:8080/HairManager/login/ServerCheck.jsp");

            InterfaceManager task = new InterfaceManager(url);
            serverData = task.execute("").get();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
